src/index.js

Markdown


Componentes de React : 

1 - Son funciones

  const componente = () => {}

2 - Siempre van en mayusculas

  const Componente = () => {}

3 - Siempre tienen retorno

  const Componente = () => {
    return "Hola Mundo"
  }



function Nav(){

}


<Nav id="nav-test" />   ===  Nav("nav-test")




PATRON CONTAINER 








class Componente extends React.Component {

  render(){

  }

  componentDidMount(){}

  componentDidUpdate(){}

  componentWillUnmount(){}

  componentWillMount(){}

  componentWillUpdate(){}

  componentWillReceiveProps(){}

  shouldComponentUpdate(){}

}



function Nav(uno,dos,footer){

}

Nav(a,b,true)
Nav(a,b,false)


<Nav id="nav-test" />   ===  Nav("nav-test")



var nombre = "horacio"

`hola , soy ${nombre}`



DESTRUCTURING : 

const arr = [1,2,3]

const [uno,dos,tres] = arr

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]






const obj = {x:1,y:2,z:3}
const {x:uno,y:dos,z:tres} = obj
const {x:x,y:y,z:z} = obj
const {x,y,z} = obj

const x = obj.x
const y = obj.y
const z = obj.z


obj["x"]
obj[x]




OBJECT PROPERTY SHORTHAND




const nombre = "horacio"

const persona = {
  nombre : nombre
}

const persona = {nombre}


HOOK : funciones que extienden la funcionalidad del mismo componente

1 - Se ejecutan adentro de un componente
2 - No pueden estar en ningun flujo 








valor inicial 0 
incrementando en una unidad
si valor actual es 8 entonces que no aumente




import { useState } from "react"

/* const btn = document.querySelector('button');
btn.addEventListener('click', ()=>{}) */


const Presentacional = () => {

  //const resultado = useState(0)
  const [contador, setContador] = useState(0)
  const [dark, setDark] = useState(false)

  //console.log(resultado)
  //const contador = resultado[0]
  //const setContador = resultado[1]
  //Estado : Es una variable interna de un componente que guarda un valor a traves del tiempo
  //const contador = 0

  const aumentarContador = () => {
    //contador = contador + 1
    //contador++
    //contador+=1
    //const p = document.querySelector('p')
    //p.innerText = contador
    setContador(contador + 1)
  }

  const toggleDark = () => {
    //dark = true
    setDark()
  }

  return (
    <div>
      <p>Contador Actual : {contador}</p>
      <p>Modo dark : {}</p>
      <button onClick={aumentarContador}>aumentar</button>
      <button onClick={toggleDark}>toggle dark</button>
    </div>
  )
}
export default Presentacional




CICLO DE VIDA : 

mount

update
  - El estado cambia
  - Su padre se actualizo 
  - Si los props cambian

unmount



/*
  Este efecto se ejecuta siempre despues de cada
  
  useEffect(()=>{
    console.log("Hubo un efecto")
  }) */


  
  /* 
  Este efecto se ejecuta despues del primer render y nunca mas

  useEffect(()=>{
    console.log("Hubo un efecto")
  },[])  */

  
  
  /*
  Este efecto se ejecuta despues del primer render y cuando cambie el valor la variable confirmado
  
  useEffect(()=>{
    console.log("Hubo un efecto")
  },[confirmado])  */


  const arr = [1,2,3]

  arr.forEach((elemento,indice)=>{
    
  })

  const r = arr.map((elemento,indice)=>{
    if(){

    }
    return ?
  })

  [2,3,4]


  Promise 


  const promesa = new Promise((res)=>{
    res(?)
  })

  promesa
    .then()

  promesa
    .catch()

    .then((contenido)=>{
      console.log("Salio todo Bien")
    })
    .catch((error)=>{
      console.log("Salio todo Mal")
    })